name: Create a flex template image and trigger a Dataflow Job

on:
  push:
    branches: [master]
  pull_request:

env:
  PROJECT_ID: terraformlearning-284414
  BUCKET: jit92
  TOPIC: messages   
  SUBSCRIPTION: projects/terraformlearning-284414/subscriptions/ratings
  DATASET: beam_samples
  TABLE: streaming_beam_sql
  TEMPLATE_IMAGE: gcr.io/$PROJECT_ID/samples/dataflow/streaming-beam-sql:latest
  TEMPLATE_PATH: gs://$BUCKET/samples/dataflow/templates/streaming-beam-sql.json
  REGION: us-central1
  

jobs:
  job1:
    name: Build Flex template and publish to gcs
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker


    # Build the Docker image
    - name: Build
      if: github.ref == 'refs/heads/master'
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/samples/dataflow/streaming-beam-sql:latest" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      if: github.ref == 'refs/heads/master'
      run: |-
        docker push "gcr.io/$PROJECT_ID/samples/dataflow/streaming-beam-sql:latest"
        
    - name: Publish template file
      if: github.ref == 'refs/heads/master'
      run: |-
            gcloud dataflow flex-template build gs://$BUCKET/samples/dataflow/templates/streaming-beam-sql.json \
              --image "gcr.io/$PROJECT_ID/samples/dataflow/streaming-beam-sql:latest" \
              --sdk-language "PYTHON" \
              --metadata-file "metadata.json"
              
              
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
    
    - name: Terraform plan
      run: terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}


    - name: Terraform apply
      if: github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
                    


